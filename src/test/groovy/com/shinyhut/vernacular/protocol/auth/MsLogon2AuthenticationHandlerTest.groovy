package com.shinyhut.vernacular.protocol.auth

import com.shinyhut.vernacular.client.VernacularConfig
import com.shinyhut.vernacular.client.VncSession
import com.shinyhut.vernacular.protocol.messages.ProtocolVersion
import spock.lang.Specification
import spock.lang.Subject

import java.util.function.Supplier

class MsLogon2AuthenticationHandlerTest extends Specification {

    def random = Mock(Random)

    @Subject
    handler = new MsLogon2AuthenticationHandler(random)

    def setup() {
        _ * random.nextLong() >> 10L
    }

    def "should request MS Logon II authentication, perform a DH key exchange, and send the user's encrypted username and password to the server"() {
        given:
        def config = Mock(VernacularConfig) {
            1 * getUsernameSupplier() >> new Supplier<String>() {
                @Override
                String get() {
                    'username'
                }
            }
            1 * getPasswordSupplier() >> new Supplier<String>() {
                @Override
                String get() {
                    'password'
                }
            }
        }

        def generator = [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02 ]
        def modulus = [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03 ]
        def serverPublicKey = [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04 ]
        def response = [0x00, 0x00, 0x00, 0x00]
        def input = new ByteArrayInputStream((generator + modulus + serverPublicKey + response) as byte[])

        def session = new VncSession(config, input, new ByteArrayOutputStream())
        session.protocolVersion = new ProtocolVersion(3, 8)

        when:
        def result = handler.authenticate(session)

        then:
        def output = ((ByteArrayOutputStream) session.outputStream).toByteArray() as List

        // MS Logon II Security Type
        output[0] == 113

        // Shared Key
        output.subList(1, 9) == [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 ] as byte[]

        // Encrypted Username
        output.subList(9, 265) ==  [
                0x13, 0xF9, 0x3C, 0xF7, 0x6B, 0xD7, 0x08, 0x9E, 0x71, 0x54, 0x0F, 0xA4, 0x8C, 0xFD, 0x20, 0x91,
                0x12, 0x08, 0xCF, 0x03, 0x1E, 0x61, 0x9D, 0xAD, 0x67, 0x34, 0x5E, 0xF4, 0xFC, 0xC4, 0xEB, 0xE3,
                0xD6, 0xA1, 0xBB, 0xB5, 0x71, 0xFA, 0xED, 0x60, 0x51, 0x44, 0xEF, 0x97, 0x0F, 0xAD, 0xE9, 0x33,
                0x39, 0xAD, 0xD4, 0xA0, 0xA8, 0x0B, 0x8F, 0xCB, 0x5D, 0xBE, 0xFE, 0xA9, 0x32, 0x16, 0xB6, 0x36,
                0xF8, 0x19, 0x64, 0x7C, 0xC5, 0x3B, 0x1D, 0xD7, 0xD1, 0x8C, 0xAE, 0xA6, 0xC8, 0x33, 0xD4, 0x0F,
                0x6C, 0xFA, 0x03, 0x74, 0x86, 0x34, 0xAB, 0x9B, 0x70, 0xDC, 0x33, 0x76, 0x39, 0x52, 0x15, 0xFD,
                0x4E, 0x1C, 0xF6, 0xDD, 0x0F, 0xBE, 0x06, 0x3E, 0x4F, 0xAF, 0xF2, 0xB0, 0x5C, 0xF5, 0x96, 0x39,
                0x04, 0xD9, 0x03, 0xD7, 0x17, 0xFC, 0x95, 0xD2, 0xA5, 0x49, 0xE9, 0xA2, 0x72, 0x69, 0x9D, 0xEF,
                0xD3, 0x4F, 0x6F, 0x34, 0x3F, 0xDE, 0xAC, 0x42, 0x5F, 0xA2, 0x5A, 0x6F, 0x5C, 0xCA, 0x0C, 0x9D,
                0x84, 0xFA, 0x88, 0x04, 0x66, 0x40, 0x21, 0x53, 0x3E, 0xAC, 0xDB, 0x28, 0xB6, 0x30, 0x52, 0xA1,
                0xC9, 0x85, 0xB2, 0x1F, 0xA3, 0xFA, 0x6A, 0x9F, 0x1B, 0x99, 0x09, 0xAE, 0x67, 0x1F, 0xE9, 0x94,
                0x30, 0xDD, 0x78, 0xF7, 0xE6, 0xC5, 0x52, 0x5E, 0xCF, 0x34, 0x9B, 0x21, 0xE0, 0x8D, 0xDF, 0xB7,
                0xAD, 0x23, 0x55, 0xE8, 0x45, 0x19, 0x9C, 0x71, 0xA5, 0x38, 0x1E, 0x47, 0xDA, 0xD3, 0xD3, 0x7D,
                0xF3, 0xB8, 0xB7, 0xD9, 0x13, 0x90, 0xE5, 0x2E, 0xEA, 0x15, 0x25, 0xA0, 0x3E, 0x93, 0xA7, 0x9C,
                0x5B, 0x92, 0xE2, 0x66, 0x45, 0x18, 0xF8, 0x9F, 0xB3, 0x43, 0xA8, 0x50, 0xA8, 0x1D, 0xE5, 0xA3,
                0x9B, 0xB5, 0x7C, 0x23, 0x97, 0x5B, 0x6B, 0xD9, 0x6C, 0x13, 0x52, 0xC2, 0x08, 0x91, 0x9C, 0xDF
        ] as byte[]

        // Encrypted Password
        output.subList(265, 329) == [
                0xBC, 0x4D, 0xFA, 0xD1, 0x60, 0x19, 0xF5, 0x3F, 0x87, 0xEF, 0x98, 0x13, 0x00, 0x77, 0xA2, 0x0C,
                0x92, 0x45, 0x53, 0x88, 0x93, 0x3D, 0xAB, 0x90, 0x49, 0x05, 0x16, 0xCF, 0x03, 0xF8, 0x79, 0x5A,
                0x31, 0x42, 0xF2, 0xF3, 0x01, 0x67, 0x5C, 0x70, 0xCC, 0xAD, 0x54, 0x05, 0xE2, 0xA6, 0x5A, 0xA8,
                0xAF, 0x22, 0x9C, 0x55, 0x00, 0x99, 0x69, 0x45, 0xA1, 0x53, 0x3B, 0x55, 0x29, 0x6E, 0xDD, 0x33
        ] as byte[]

        result.success
    }
}
